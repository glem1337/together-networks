/*
  Поиск ближайшего родителя по селектору
  https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README-ru.md#1.6
*/

function closest(el, selector) {
  const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;

  while (el) {
    if (matchesSelector.call(el, selector)) {
      return el;
    } else {
      el = el.parentElement;
    }
  }
  return null;
}


/*
  Запуск по готовности DOM
  http://youmightnotneedjquery.com/#ready
  Применение: ready(function(){ console.log('ddd'); });
*/

function ready(fn) {
  if (document.readyState != 'loading') {
    fn();
  } else {
    document.addEventListener('DOMContentLoaded', fn);
  }
}


/*
  При добавлении новых дополнительных функций, изолируйте их!
*/

// (function(){
//   // код
// }());


// Свой код с jQuery

// $( document ).ready(function() {

// });

let CustomSelect = function (select) {

  this.select = select;
  this.nodeOption = this.select.find('option');
  this.wrapper = $('<div/>', {class: 'custom-select-wrapper'});
  this.customSelect = $('<div/>', {class: 'custom-select'});
  this.trigger = $('<div/>', {class: 'custom-select__trigger'});
  this.options = $('<div/>', {class: 'custom-select__options'});
  this.optionsInner = $('<div/>', {class: 'custom-select__options-inner'});
  this.placeholder = this.select.data('placeholder');


  this.trigger.on('click', this.handleTrigger.bind(this));
  $(document).mouseup(this.handleClickDocument.bind(this));


  this.createCustomSelect();
};

CustomSelect.prototype = {

  createCustomSelect: function () {

    this.select.wrap(this.wrapper);
    this.customSelect.append(this.trigger.text(this.placeholder));

    this.nodeWrap = this.select.parent('.custom-select-wrapper');

    this.nodeOption.each(function (index, elem) {
      let option = '<div class="custom-select__option" data-value="' + $(elem).attr('value') + '">' + $(elem).text() + '</div>';
      this.optionsInner.append(option);
    }.bind(this));

    this.options.append(this.optionsInner);
    this.customSelect.append(this.options);
    this.option = this.customSelect.find('.custom-select__option');

    this.option.on('click', this.handleOption.bind(this));

    this.select.after(this.customSelect);
  },

  handleTrigger: function () {
    if (this.trigger.hasClass('is-active')) {
      this.close();
    } else {
      this.show();
    }
  },

  close: function () {
    this.trigger.removeClass('is-active');
    this.options.hide();
  },

  show: function () {
    this.trigger.addClass('is-active');
    this.options.show();
  },

  handleOption: function (e) {
    this.select.val($(e.target).data('value'));
    this.trigger.text($(e.target).text());
    this.handleTrigger();
  },

  handleClickDocument: function (e) {
    if (!this.nodeWrap.is(e.target)
      && this.nodeWrap.has(e.target).length === 0) {
      this.close();
    }
  },


};

$('.select').each(function (index, elem) {
  new CustomSelect($(elem));
});










$('.button-login').on('click', function () {
  $(this).hide();
  $('#login').addClass('is-active');
});

$(document).mouseup(function (e) {
  let form = $('#login');
  if (!form.is(e.target)
    && form.has(e.target).length === 0) {
    form.removeClass('is-active');
    $('.button-login').show();
  }
});

let StepForm = function (form) {

  this.form = form;
  this.prevStepBtn = this.form.find('#prev');
  this.nextStepBtn = this.form.find('#next');
  this.submitBtn = this.form.find('#submit');
  this.currentStep = 0;
  this.nodeStep = this.form.find('.form__fieldset');
  this.nodeProgressItems = this.form.find('#progress li');
  this.totalSteps = this.nodeStep.length - 1;

  this.init();
};

StepForm.prototype = {

  init: function () {
    this.showStep(this.currentStep);
    this.prevStepBtn.on('click', this.handlePrev.bind(this));
    this.nextStepBtn.on('click', this.handleNext.bind(this));
    this.nodeProgressItems.on('click', this.handlePoint.bind(this));
    this.form.submit(this.handleSubmit.bind(this));
  },

  formSend: function (formData) {
    // Таким способом только из-за поддержки IE и без дополнительных полифилов :(
    const xhr = new XMLHttpRequest();
    xhr.open('POST', 'http://www.mocky.io/v2/5dfcef48310000ee0ed2c281', true);
    xhr.send(formData);
    xhr.addEventListener('readystatechange', function (e) {
      if (xhr.readyState !== 4) return;
      if (xhr.status === 200) {
        let response = JSON.parse(xhr.response)
        if (response.status === 'error') {
          this.errorsParse(response.errors);
          this.toggleSubmitBtn();
        } else {
          alert('Registration success');
        }
      }
    }.bind(this));
  },

  setError: function (name, message) {
    this.form
      .find('[data-error=' + name + ']')
      .addClass('is-active')
      .text(message);
  },

  errorsParse: function (errors) {
    let firstErrorName = errors[0].name;
    let firstErrorIndex = this.form
      .find('[data-error=' + firstErrorName + ']')
      .index();
    errors.forEach(function (item) {
      this.setError(item.name, item.message)
    }.bind(this));
    this.showStep(firstErrorIndex);
  },

  clearErrors: function () {
    this.form
      .find('.form__error')
      .removeClass('is-active');
  },

  toggleSubmitBtn: function () {
    if (this.submitBtn.hasClass('in-process')) {
      this.submitBtn.text('Start now');
      this.submitBtn.removeClass('in-process');
    } else {
      this.submitBtn.text('Sending');
      this.submitBtn.addClass('in-process');
    }
  },

  handleSubmit: function (e) {
    e.preventDefault();
    this.clearErrors();
    this.recalculateHeightForStep(this.totalSteps);
    let data = this.form.serializeArray();
    this.toggleSubmitBtn();
    // Синтетическая задержка
    setTimeout(this.formSend.bind(this, data), 2000);
    return false;
  },

  recalculateHeightForStep: function (step) {
    let stepHeight = this.nodeStep.eq(step).outerHeight();
    this.setFormHeight(stepHeight);
  },

  hideToggleButtons: function (step) {
    if (this.totalSteps === step) {
      this.submitBtn.show();
      this.nextStepBtn.hide();
    } else {
      this.submitBtn.hide();
      this.nextStepBtn.show();
    }

    if (step === 0) {
      this.prevStepBtn.hide();
    } else {
      this.prevStepBtn.show();
    }
  },

  showStep: function (step) {
    if (this.totalSteps >= step && step >= 0) {

      this.setCurrentStep(step);
      this.nodeStep.removeClass('is-active');
      this.nodeStep
        .eq(step)
        .addClass('is-active');

      this.hideToggleButtons(step);

      this.recalculateHeightForStep(step);
      this.setProgress(step);
    }

  },

  setProgress: function (step) {
    this.nodeProgressItems.removeClass('is-active');
    this.nodeProgressItems.each(function (index, elem) {
      if (index <= step) {
        $(elem).addClass('is-active');
      }
    });
  },

  setFormHeight: function (height) {
    this.form.height(height);
  },

  setCurrentStep: function (step) {
    this.currentStep = step;
  },

  handlePoint: function (e) {
    let step = $(e.target).index();
    this.showStep(step);
  },

  handlePrev: function () {
    this.showStep(this.currentStep - 1);
  },

  handleNext: function () {
    this.showStep(this.currentStep + 1);
  },

};


new StepForm($('#form'));

//# sourceMappingURL=script.min.js.map
